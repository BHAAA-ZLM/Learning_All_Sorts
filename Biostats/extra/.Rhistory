curve(dgamma(x, shape = 2, scale = 1) + dnorm(x, mean = 7, sd = 0.5) / 5,
from = 0, to = 10,
main = "Gene Expression Distribution",
xlab = "Gene expression level", ylab = "Counts",
xaxt = 'n', yaxt = 'n')
curve(dgamma(x, shape = 2, scale = 1) + dnorm(x, mean = 7, sd = 0.5) / 10,
from = 0, to = 10,
main = "Gene Expression Distribution",
xlab = "Gene expression level", ylab = "Counts",
xaxt = 'n', yaxt = 'n')
curve(dgamma(x, shape = 2, scale = 1) + dnorm(x, mean = 7, sd = 0.5) / 15,
from = 0, to = 10,
main = "Gene Expression Distribution",
xlab = "Gene expression level", ylab = "Counts",
xaxt = 'n', yaxt = 'n')
curve(dgamma(x, shape = 2, scale = 1) + dnorm(x, mean = 7, sd = 0.5) / 20,
from = 0, to = 10,
main = "Gene Expression Distribution",
xlab = "Gene expression level", ylab = "Counts",
xaxt = 'n', yaxt = 'n')
hist(dnorm(x, mean = 5, sd = 1.7) + dnorm(x, mean = 10, sd = 1.6),
from = 0, to = 14,
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)',
yaxt = 'n', ylab = 'Counts')
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
from = 0, to = 14,
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)',
yaxt = 'n', ylab = 'Counts')
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)',
yaxt = 'n', ylab = 'Counts')
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)',
yaxt = 'n', ylab = 'Counts',
breaks = 100)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n'
yaxt = 'n', ylab = 'Counts',
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Population Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Sample Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
hist(rnorm(312, mean = 5, sd = 1.7) + rnorm(313, mean = 10, sd = 1.6),
main = 'Sample Distribution of Weaver Ants Body Length',
xlab = 'Weaver Ant Body Length (mm)', xaxt = 'n',
yaxt = 'n', ylab = 'Counts',
breaks = 50)
sample(1:1000, 20)
qt(0.95, 7)
?qt
qt(0.975, 7)
pnorm(q = 1.96, mean = 0, sd = 1)
pnorm(1.96, 0, 1)
?HyperDist
?qhyper
phyper(268, 743, 431, 699)
phyper(105,534,294,399)
phyper(268,699,475,743)
?plot
?plt
?plot
install.packages("maps")
# Load essential packages
library(ggplot2)
library(dplyr)
?filter
# Load the UK map
library(maps)
UK <- map_data("world") %>% filter(region == "UK")
View(UK)
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="UK")
View(data)
View(UK)
View(data)
View(UK)
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point( data=data, aes(x=long, y=lat, alpha=pop)) +
geom_text_repel( data=data %>% arrange(pop) %>% tail(10), aes(x=long, y=lat, label=name), size=5) +
geom_point( data=data %>% arrange(pop) %>% tail(10), aes(x=long, y=lat), color="red", size=3) +
theme_void() + ylim(50,59) + coord_map() +
theme(legend.position="none")
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point( data=data, aes(x=long, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat), fill = "blue") +
theme_void() + ylim(50,59) + coord_map()
?geom_point
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat, fill = "blue")) +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat, colour = "blue")) +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat, colour = "red")) +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat), colour = "red") +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat), colour = "blue") +
theme_void() + ylim(50,59) + coord_map()
compute_avg <- function(data){
out <- as.data.frame(rowMeans(data[, 1:2]))
last <- dim(data)[2] / 2 - 1
for(i in 1: last){
a <- 2 * i + 1
b <- 2 * i + 2
out[,i + 1] <- rowMeans(data[, a:b])
}
return(out)
}
group_names <- c( 's7wt', 's8wt', 's7e2f1mo', 's8e2f1mo', 's7otx1mo', 's8otx1mo', 's7otx1e2f1mo', 's8otx1e2f1mo')
input_data_avg <- compute_avg(input_data)
colnames(input_data_avg) <- group_names
# Load essential packages
library(ggplot2)
library(dplyr)
# Load the UK map
library(maps)
UK <- map_data("world") %>% filter(region == "China")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="UK")
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="China")
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
###
# Obtain st8/st7 upregulated genes, s7mo/s7wt upregulated genes, s7doublemo/s7wt genes
s8wt_up <- toupper(read.table('/Users/lumizhang/Desktop/xenopus/20230309 E2f1_RNA/s8wt_s7wt_gene_up.txt')[,1])
# Load essential packages
library(ggplot2)
library(dplyr)
# Load essential packages
library(ggplot2)
library(dplyr)
# Load the UK map
library(maps)
china <- map_data("world") %>% filter(region == "China")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="China")
# Left chart
ggplot() +
geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# Left chart
ggplot() +
geom_polygon(data = china, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
?mutate
View(data)
View(china)
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
gome_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3)
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3)
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map()
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9)
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12))
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log")
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(trans="log10")
?scale_color_viridis
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(option="magma")
# Load the UK map
library(maps)
usa <- map_data("world") %>% filter(region == "USA")
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="USA")
# Left chart
ggplot() +
geom_polygon(data = china, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() +
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void()
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city)
data <- world.cities %>% filter(country.etc=="USA")
# Left chart
ggplot() +
geom_polygon(data = usa, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point(data=data, aes(x=long, y=lat)) +
theme_void() + coord_map()
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = china, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(option="magma")
# import viridis package for the colours
library(viridis)
# Arrange data so that bigger cities appears on the top
data %>%
arrange(pop) %>%
mutate( name = factor(name, unique(name))) %>%
ggplot()+
geom_polygon(data = usa, aes(x=long, y=lat, group=group), fill="grey", alpha=0.3) +
theme_void() +
coord_map() +
geom_point(aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) +
scale_size_continuous(range=c(1,12)) +
scale_color_viridis(option="magma")
setwd('/Users/lumizhang/Documents/sustech/biology/classes/Biostatistics/extra')
read.csv('iris.data', header = T)
iris <- read.csv('iris.data', header = T)
View(iris)
iris <- read.csv('iris.data', header = F)
View(iris)
iris <- read.csv('iris.csv', header = T)
View(iris)
boxplot(Sepal.LengthCm ~ Species, data = iris)
boxplot(SepalWidthCm ~ Species, data = iris)
?aov
aov(SepalWidthCm ~ Species, data = iris)
res <- aov(SepalWidthCm ~ Species, data = iris)
summary(res)
pairwise.t.test(SepalWidthCm ~ Species, data = iris)
?pairwise.t.test
pairwise.t.test(iris$SepalWidthCm, iris$Species, data = iris)
pairwise.t.test(iris$SepalWidthCm, iris$Species)
pairwise.t.test(iris$SepalWidthCm, iris$Species, p.adjust.method = "bonferroni")
t.test(iris$SepalWidthCm, iris$Species)
t.test(SepalWidthCm ~ Species, data = iris)
#t.test(SepalWidthCm ~ Species, data = iris)
# Error in t.test.formula(SepalWidthCm ~ Species, data = iris) :
#   grouping factor must have exactly 2 levels
t.test(SepalWidthCm ~ Species, data = iris[, c("Iris-versicolor", "Iris-virginica")])
#t.test(SepalWidthCm ~ Species, data = iris)
# Error in t.test.formula(SepalWidthCm ~ Species, data = iris) :
#   grouping factor must have exactly 2 levels
t.test(SepalWidthCm ~ Species, data = iris[, iris$Species == c("Iris-versicolor", "Iris-virginica")])
iris$Species == c("Iris-versicolor", "Iris-virginica")
#t.test(SepalWidthCm ~ Species, data = iris)
# Error in t.test.formula(SepalWidthCm ~ Species, data = iris) :
#   grouping factor must have exactly 2 levels
t.test(SepalWidthCm ~ Species, data = iris$Species == c("Iris-versicolor", "Iris-virginica"))
#t.test(SepalWidthCm ~ Species, data = iris)
# Error in t.test.formula(SepalWidthCm ~ Species, data = iris) :
#   grouping factor must have exactly 2 levels
t.test(SepalWidthCm ~ Species, data = iris[51:150,])
t.test(SepalWidthCm ~ Species, data = iris[, iris$Species %in% c("Iris-versicolor", "Iris-virginica")])
t.test(SepalWidthCm ~ Species, data = iris[iris$Species %in% c("Iris-versicolor", "Iris-virginica"),])
mean_versi <- mean(iris[iris$Species %in% "Iris-versicolor",]$SepalWidthCm)
mean_virgini <- mean(iris[iris$Species %in% "Iris-virginica",]$SepalWidthCm)
summary(res)
?pt()
pt((mean_versi - mean_virgini)/sqrt(msw * (1/25)), 98)
msw <- 0.116
pt((mean_versi - mean_virgini)/sqrt(msw * (1/25)), 98)
pt((mean_versi - mean_virgini)/sqrt(msw * (1/25)), 98, lower.tail = F)
pt((mean_versi - mean_virgini)/sqrt(msw * (1/25)), 98) * 2
setwd('/Users/lumizhang/Documents/sustech/biology/classes/Biostatistics/extra')
# In R, you can check the annotations for a function using ?function()
# Read data with read.csv() function
iris <- read.csv('iris.csv', header = T)
# Draw boxplots to get a general view for the data
boxplot(SepalWidthCm ~ Species, data = iris)
# Perform ANOVA to check are the mean of Sepal Width between species
res <- aov(SepalWidthCm ~ Species, data = iris)
summary(res)
# Perform pairwise T-tests
pairwise.t.test(iris$SepalWidthCm, iris$Species, p.adjust.method = "bonferroni")
#t.test(SepalWidthCm ~ Species, data = iris)
# Error in t.test.formula(SepalWidthCm ~ Species, data = iris) :
#   grouping factor must have exactly 2 levels
# Perform T-test in the sepcies versicolor and virginica
t.test(SepalWidthCm ~ Species, data = iris[51:150,])
t.test(SepalWidthCm ~ Species, data = iris[iris$Species %in% c("Iris-versicolor", "Iris-virginica"),])
# Adjust T-test with the mean square within
mean_versi <- mean(iris[iris$Species %in% "Iris-versicolor",]$SepalWidthCm)
mean_virgini <- mean(iris[iris$Species %in% "Iris-virginica",]$SepalWidthCm)
msw <- 0.116
pt((mean_versi - mean_virgini)/sqrt(msw * (1/25)), 98)
View(iris)
plot(iris$SepalLengthCm, iris$SepalWidthCm)
?plot()
plot(iris$SepalLengthCm, iris$SepalWidthCm, pch = 20, type = 'b')
plot(iris$SepalLengthCm, iris$SepalWidthCm, pch = 20)
a <- plot(iris$SepalLengthCm, iris$SepalWidthCm, pch = 20)
lm(iris$SepalLengthCm, iris$SepalWidthCm)
?lm()
lm(iris$SepalLengthCm~iris$SepalWidthCm)
b <- curve(-0.2089 * x + 6.4812, xlim = c(0,5), ylim = c(0,5) )
b
b
b <- curve(-0.2089 * x + 6.4812, xlim = c(4,6), ylim = c(4,6) )
a + b
